// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "gettext.h"
#include "lgbook.h"
#include <config.h>
#include <FL/Fl_Pixmap.H>
#include "flmisc.h"
#include "logsupport.h"
#include "pixmaps.h"

Fl_Double_Window *wExport=(Fl_Double_Window *)0;

Fl_Check_Browser *chkExportBrowser=(Fl_Check_Browser *)0;

Fl_Button *btnClearAll=(Fl_Button *)0;

static void cb_btnClearAll(Fl_Button*, void*) {
  btn_export_by_date->value(0);
chkExportBrowser->check_none();
}

Fl_Button *btnCheckAll=(Fl_Button *)0;

static void cb_btnCheckAll(Fl_Button*, void*) {
  btn_export_by_date->value(0);
chkExportBrowser->check_all();
}

Fl_DateInput *inp_export_start_date=(Fl_DateInput *)0;

static void cb_inp_export_start_date(Fl_DateInput*, void*) {
  cb_export_date_select();
}

Fl_DateInput *inp_export_stop_date=(Fl_DateInput *)0;

static void cb_inp_export_stop_date(Fl_DateInput*, void*) {
  cb_export_date_select();
}

Fl_Check_Button *btn_export_by_date=(Fl_Check_Button *)0;

static void cb_btn_export_by_date(Fl_Check_Button*, void*) {
  cb_export_date_select();
}

Fl_Return_Button *btnOK=(Fl_Return_Button *)0;

static void cb_btnOK(Fl_Return_Button*, void*) {
  wExport->hide();
Export_log();
}

Fl_Button *btnCancel=(Fl_Button *)0;

static void cb_btnCancel(Fl_Button*, void*) {
  wExport->hide();
}

Fl_Button *btnClearAllFields=(Fl_Button *)0;

static void cb_btnClearAllFields(Fl_Button*, void*) {
  btnSelectCall->value(0);
btnSelectName->value(0);
btnSelectFreq->value(0);
btnSelectBand->value(0);
btnSelectMode->value(0);
btnSelectQSOdateOn->value(0);
btnSelectQSOdateOff->value(0);
btnSelectTimeON->value(0);
btnSelectTimeOFF->value(0);
btnSelectQth->value(0);
btnSelectLOC->value(0);
btnSelectState->value(0);
btnSelectProvince->value(0);
btnSelectCountry->value(0);
btnSelectQSLrcvd->value(0);
btnSelectQSLsent->value(0);
btnSelectSerialIN->value(0);
btnSelectSerialOUT->value(0);
btnSelectXchgIn->value(0);
btnSelectMyXchg->value(0);
btnSelectRSTsent->value(0);
btnSelectRSTrcvd->value(0);
btnSelectIOTA->value(0);
btnSelectDXCC->value(0);
btnSelectCNTY->value(0);
btnSelectCONT->value(0);
btnSelectCQZ->value(0);
btnSelectITUZ->value(0);
btnSelectTX_pwr->value(0);
btnSelectNotes->value(0);
btnSelectClass->value(0);
btnSelectSection->value(0);
btnSelectQSL_VIA->value(0);
}

Fl_Button *btnCheckAllFields=(Fl_Button *)0;

static void cb_btnCheckAllFields(Fl_Button*, void*) {
  btnSelectCall->value(1);
btnSelectName->value(1);
btnSelectFreq->value(1);
btnSelectBand->value(1);
btnSelectMode->value(1);
btnSelectQSOdateOn->value(1);
btnSelectQSOdateOff->value(1);
btnSelectTimeON->value(1);
btnSelectTimeOFF->value(1);
btnSelectQth->value(1);
btnSelectLOC->value(1);
btnSelectState->value(1);
btnSelectProvince->value(1);
btnSelectCountry->value(1);
btnSelectQSLrcvd->value(1);
btnSelectQSLsent->value(1);
btnSelectSerialIN->value(1);
btnSelectSerialOUT->value(1);
btnSelectXchgIn->value(1);
btnSelectMyXchg->value(1);
btnSelectRSTsent->value(1);
btnSelectRSTrcvd->value(1);
btnSelectIOTA->value(1);
btnSelectDXCC->value(1);
btnSelectCNTY->value(1);
btnSelectCONT->value(1);
btnSelectCQZ->value(1);
btnSelectITUZ->value(1);
btnSelectTX_pwr->value(1);
btnSelectNotes->value(1);
btnSelectClass->value(1);
btnSelectSection->value(1);
btnSelectQSL_VIA->value(1);
}

Fl_Check_Button *btnSelectCall=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectName=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectFreq=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectBand=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectMode=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSOdateOn=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSOdateOff=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectTimeON=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectTimeOFF=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectTX_pwr=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectRSTsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectRSTrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQth=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectLOC=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectState=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSL_VIA=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectProvince=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCountry=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectNotes=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSLrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectQSLsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectSerialIN=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectSerialOUT=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectXchgIn=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectMyXchg=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCNTY=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCONT=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectCQZ=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectDXCC=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectIOTA=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectITUZ=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectClass=(Fl_Check_Button *)0;

Fl_Check_Button *btnSelectSection=(Fl_Check_Button *)0;

Fl_Button *btnSetFieldDefaults=(Fl_Button *)0;

static void cb_btnSetFieldDefaults(Fl_Button*, void*) {
  btnSelectCall->value(1);
btnSelectName->value(1);
btnSelectFreq->value(1);
btnSelectBand->value(1);
btnSelectMode->value(1);
btnSelectQSOdateOn->value(1);
btnSelectQSOdateOff->value(1);
btnSelectTimeON->value(1);
btnSelectTimeOFF->value(1);
btnSelectQth->value(0);
btnSelectLOC->value(0);
btnSelectState->value(0);
btnSelectProvince->value(0);
btnSelectCountry->value(0);
btnSelectQSLrcvd->value(0);
btnSelectQSLsent->value(0);
btnSelectSerialIN->value(0);
btnSelectSerialOUT->value(0);
btnSelectXchgIn->value(0);
btnSelectMyXchg->value(0);
btnSelectRSTsent->value(0);
btnSelectRSTrcvd->value(1);
btnSelectIOTA->value(0);
btnSelectDXCC->value(0);
btnSelectCNTY->value(0);
btnSelectCONT->value(0);
btnSelectCQZ->value(0);
btnSelectITUZ->value(0);
btnSelectTX_pwr->value(0);
btnSelectNotes->value(0);
btnSelectQSL_VIA->value(0);
}

Fl_Button *btnSetLoTWfields=(Fl_Button *)0;

static void cb_btnSetLoTWfields(Fl_Button*, void*) {
  btnSelectCall->value(1);
btnSelectName->value(0);
btnSelectFreq->value(1);
btnSelectBand->value(0);
btnSelectMode->value(1);
btnSelectQSOdateOn->value(1);
btnSelectQSOdateOff->value(0);
btnSelectTimeON->value(1);
btnSelectTimeOFF->value(0);
btnSelectQth->value(0);
btnSelectLOC->value(0);
btnSelectState->value(0);
btnSelectProvince->value(0);
btnSelectCountry->value(0);
btnSelectQSLrcvd->value(0);
btnSelectQSLsent->value(0);
btnSelectSerialIN->value(0);
btnSelectSerialOUT->value(0);
btnSelectXchgIn->value(0);
btnSelectMyXchg->value(0);
btnSelectRSTsent->value(0);
btnSelectRSTrcvd->value(0);
btnSelectIOTA->value(0);
btnSelectDXCC->value(0);
btnSelectCNTY->value(0);
btnSelectCONT->value(0);
btnSelectCQZ->value(0);
btnSelectITUZ->value(0);
btnSelectTX_pwr->value(0);
btnSelectNotes->value(0);
btnSelectQSL_VIA->value(0);
}

Fl_Double_Window *dlgLogbook=(Fl_Double_Window *)0;

Fl_DateInput *inpDate_log=(Fl_DateInput *)0;

Fl_Input2 *inpTimeOn_log=(Fl_Input2 *)0;

Fl_Input2 *inpCall_log=(Fl_Input2 *)0;

Fl_Input2 *inpName_log=(Fl_Input2 *)0;

Fl_Input2 *inpRstR_log=(Fl_Input2 *)0;

Fl_DateInput *inpDateOff_log=(Fl_DateInput *)0;

Fl_Input2 *inpTimeOff_log=(Fl_Input2 *)0;

Fl_Input2 *inpFreq_log=(Fl_Input2 *)0;

Fl_Input2 *inpMode_log=(Fl_Input2 *)0;

Fl_Input2 *inpTX_pwr_log=(Fl_Input2 *)0;

Fl_Input2 *inpRstS_log=(Fl_Input2 *)0;

Fl_Input2 *inpQth_log=(Fl_Input2 *)0;

Fl_Input2 *inpState_log=(Fl_Input2 *)0;

Fl_Input2 *inpVE_Prov_log=(Fl_Input2 *)0;

Fl_Input2 *inpLoc_log=(Fl_Input2 *)0;

Fl_Input2 *inpCountry_log=(Fl_Input2 *)0;

Fl_Tabs *Tabs=(Fl_Tabs *)0;

Fl_Group *tab_log_qsl=(Fl_Group *)0;

Fl_DateInput *inpQSLrcvddate_log=(Fl_DateInput *)0;

Fl_DateInput *inpEQSLrcvddate_log=(Fl_DateInput *)0;

Fl_DateInput *inpLOTWrcvddate_log=(Fl_DateInput *)0;

Fl_DateInput *inpQSLsentdate_log=(Fl_DateInput *)0;

Fl_DateInput *inpEQSLsentdate_log=(Fl_DateInput *)0;

Fl_DateInput *inpLOTWsentdate_log=(Fl_DateInput *)0;

Fl_Input2 *inpQSL_VIA_log=(Fl_Input2 *)0;

Fl_Group *tab_log_contest=(Fl_Group *)0;

Fl_Input2 *inpSerNoOut_log=(Fl_Input2 *)0;

Fl_Input2 *inpMyXchg_log=(Fl_Input2 *)0;

Fl_Input2 *inpSerNoIn_log=(Fl_Input2 *)0;

Fl_Input2 *inpXchgIn_log=(Fl_Input2 *)0;

Fl_Input2 *inp_FD_class_log=(Fl_Input2 *)0;

Fl_Input2 *inp_FD_section_log=(Fl_Input2 *)0;

Fl_Group *tab_log_other=(Fl_Group *)0;

Fl_Input2 *inpCNTY_log=(Fl_Input2 *)0;

Fl_Input2 *inpIOTA_log=(Fl_Input2 *)0;

Fl_Input2 *inpCQZ_log=(Fl_Input2 *)0;

Fl_Input2 *inpCONT_log=(Fl_Input2 *)0;

Fl_Input2 *inpITUZ_log=(Fl_Input2 *)0;

Fl_Input2 *inpDXCC_log=(Fl_Input2 *)0;

Fl_Group *tab_log_notes=(Fl_Group *)0;

Fl_Input2 *inpNotes_log=(Fl_Input2 *)0;

Fl_Input2 *inpSearchString=(Fl_Input2 *)0;

Fl_Input2 *txtNbrRecs_log=(Fl_Input2 *)0;

Fl_Button *bNewSave=(Fl_Button *)0;

Fl_Button *bUpdateCancel=(Fl_Button *)0;

Fl_Button *bDelete=(Fl_Button *)0;

Fl_Button *bRetrieve=(Fl_Button *)0;

Fl_Button *bSearchPrev=(Fl_Button *)0;

Fl_Button *bSearchNext=(Fl_Button *)0;

Table *wBrowser=(Table *)0;

Fl_Output *txtLogFile=(Fl_Output *)0;

Fl_Double_Window *wCabrillo=(Fl_Double_Window *)0;

Fl_Check_Browser *chkCabBrowser=(Fl_Check_Browser *)0;

Fl_Button *btnCabClearAll=(Fl_Button *)0;

static void cb_btnCabClearAll(Fl_Button*, void*) {
  chkCabBrowser->check_none();
}

Fl_Button *btnCabCheckAll=(Fl_Button *)0;

static void cb_btnCabCheckAll(Fl_Button*, void*) {
  chkCabBrowser->check_all();
}

Fl_Return_Button *btnCabOK=(Fl_Return_Button *)0;

static void cb_btnCabOK(Fl_Return_Button*, void*) {
  wCabrillo->hide();
WriteCabrillo();
}

Fl_Button *btnCabCancel=(Fl_Button *)0;

static void cb_btnCabCancel(Fl_Button*, void*) {
  wCabrillo->hide();
}

Fl_ComboBox *cboContest=(Fl_ComboBox *)0;

static void cb_cboContest(Fl_ComboBox*, void*) {
  setContestType();
}

Fl_Check_Button *btnCabCall=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabFreq=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabMode=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabQSOdate=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabTimeOFF=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabRSTsent=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabRSTrcvd=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabSerialIN=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabSerialOUT=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabXchgIn=(Fl_Check_Button *)0;

Fl_Check_Button *btnCabMyXchg=(Fl_Check_Button *)0;

Fl_Button *btnCabClearAllFields=(Fl_Button *)0;

static void cb_btnCabClearAllFields(Fl_Button*, void*) {
  btnCabCall->value(0);
btnCabFreq->value(0);
btnCabMode->value(0);
btnCabQSOdate->value(0);
btnCabTimeOFF->value(0);
btnCabSerialIN->value(0);
btnCabSerialOUT->value(0);
btnCabXchgIn->value(0);
btnCabMyXchg->value(0);
btnCabRSTsent->value(0);
btnCabRSTrcvd->value(0);
}

Fl_Button *btnCabCheckAllFields=(Fl_Button *)0;

static void cb_btnCabCheckAllFields(Fl_Button*, void*) {
  btnCabCall->value(1);
btnCabFreq->value(1);
btnCabMode->value(1);
btnCabQSOdate->value(1);
btnCabTimeOFF->value(1);
btnCabSerialIN->value(1);
btnCabSerialOUT->value(1);
btnCabXchgIn->value(1);
btnCabMyXchg->value(1);
btnCabRSTsent->value(1);
btnCabRSTrcvd->value(1);
}

void create_logbook_dialogs() {
  { wExport = new Fl_Double_Window(675, 435, _("Export Setup"));
    { Fl_Group* o = new Fl_Group(4, 4, 388, 400, _("Select Records to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { chkExportBrowser = new Fl_Check_Browser(13, 25, 370, 295);
      } // Fl_Check_Browser* chkExportBrowser
      { btnClearAll = new Fl_Button(69, 325, 90, 24, _("Clear All"));
        btnClearAll->callback((Fl_Callback*)cb_btnClearAll);
      } // Fl_Button* btnClearAll
      { btnCheckAll = new Fl_Button(200, 325, 90, 24, _("Check All"));
        btnCheckAll->callback((Fl_Callback*)cb_btnCheckAll);
      } // Fl_Button* btnCheckAll
      { inp_export_start_date = new Fl_DateInput(14, 371, 100, 22, _("Start Date"));
        inp_export_start_date->tooltip(_("Start date for export"));
        inp_export_start_date->box(FL_DOWN_BOX);
        inp_export_start_date->color(FL_BACKGROUND2_COLOR);
        inp_export_start_date->selection_color(FL_SELECTION_COLOR);
        inp_export_start_date->labeltype(FL_NORMAL_LABEL);
        inp_export_start_date->labelfont(0);
        inp_export_start_date->labelsize(14);
        inp_export_start_date->labelcolor(FL_FOREGROUND_COLOR);
        inp_export_start_date->callback((Fl_Callback*)cb_inp_export_start_date);
        inp_export_start_date->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_export_start_date->when(FL_WHEN_RELEASE);
        inp_export_start_date->format(2);
      } // Fl_DateInput* inp_export_start_date
      { inp_export_stop_date = new Fl_DateInput(138, 371, 100, 22, _("Stop Date"));
        inp_export_stop_date->tooltip(_("Inclusive stop date for export"));
        inp_export_stop_date->box(FL_DOWN_BOX);
        inp_export_stop_date->color(FL_BACKGROUND2_COLOR);
        inp_export_stop_date->selection_color(FL_SELECTION_COLOR);
        inp_export_stop_date->labeltype(FL_NORMAL_LABEL);
        inp_export_stop_date->labelfont(0);
        inp_export_stop_date->labelsize(14);
        inp_export_stop_date->labelcolor(FL_FOREGROUND_COLOR);
        inp_export_stop_date->callback((Fl_Callback*)cb_inp_export_stop_date);
        inp_export_stop_date->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        inp_export_stop_date->when(FL_WHEN_RELEASE);
        inp_export_stop_date->format(2);
      } // Fl_DateInput* inp_export_stop_date
      { btn_export_by_date = new Fl_Check_Button(263, 374, 70, 15, _("select by date"));
        btn_export_by_date->tooltip(_("Enable to select date range"));
        btn_export_by_date->down_box(FL_DOWN_BOX);
        btn_export_by_date->callback((Fl_Callback*)cb_btn_export_by_date);
      } // Fl_Check_Button* btn_export_by_date
      o->end();
    } // Fl_Group* o
    { btnOK = new Fl_Return_Button(536, 408, 90, 24, _("OK"));
      btnOK->callback((Fl_Callback*)cb_btnOK);
    } // Fl_Return_Button* btnOK
    { btnCancel = new Fl_Button(405, 408, 90, 24, _("Cancel"));
      btnCancel->callback((Fl_Callback*)cb_btnCancel);
    } // Fl_Button* btnCancel
    { Fl_Group* o = new Fl_Group(392, 4, 280, 400, _("Select Fields to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { btnClearAllFields = new Fl_Button(395, 351, 85, 24, _("Clear All"));
        btnClearAllFields->callback((Fl_Callback*)cb_btnClearAllFields);
      } // Fl_Button* btnClearAllFields
      { btnCheckAllFields = new Fl_Button(395, 377, 85, 24, _("Check All"));
        btnCheckAllFields->callback((Fl_Callback*)cb_btnCheckAllFields);
      } // Fl_Button* btnCheckAllFields
      { btnSelectCall = new Fl_Check_Button(402, 31, 70, 15, _("Call"));
        btnSelectCall->down_box(FL_DOWN_BOX);
        btnSelectCall->value(1);
      } // Fl_Check_Button* btnSelectCall
      { btnSelectName = new Fl_Check_Button(402, 51, 70, 15, _("Name"));
        btnSelectName->down_box(FL_DOWN_BOX);
        btnSelectName->value(1);
      } // Fl_Check_Button* btnSelectName
      { btnSelectFreq = new Fl_Check_Button(402, 71, 70, 15, _("Freq"));
        btnSelectFreq->down_box(FL_DOWN_BOX);
        btnSelectFreq->value(1);
      } // Fl_Check_Button* btnSelectFreq
      { btnSelectBand = new Fl_Check_Button(402, 91, 70, 15, _("Band"));
        btnSelectBand->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectBand
      { btnSelectMode = new Fl_Check_Button(402, 111, 70, 15, _("Mode"));
        btnSelectMode->down_box(FL_DOWN_BOX);
        btnSelectMode->value(1);
      } // Fl_Check_Button* btnSelectMode
      { btnSelectQSOdateOn = new Fl_Check_Button(402, 132, 70, 15, _("QSO Date On"));
        btnSelectQSOdateOn->down_box(FL_DOWN_BOX);
        btnSelectQSOdateOn->value(1);
      } // Fl_Check_Button* btnSelectQSOdateOn
      { btnSelectQSOdateOff = new Fl_Check_Button(402, 152, 70, 15, _("QSO Date Off"));
        btnSelectQSOdateOff->down_box(FL_DOWN_BOX);
        btnSelectQSOdateOff->value(1);
      } // Fl_Check_Button* btnSelectQSOdateOff
      { btnSelectTimeON = new Fl_Check_Button(402, 172, 70, 15, _("Time ON"));
        btnSelectTimeON->down_box(FL_DOWN_BOX);
        btnSelectTimeON->value(1);
      } // Fl_Check_Button* btnSelectTimeON
      { btnSelectTimeOFF = new Fl_Check_Button(402, 192, 70, 15, _("Time OFF"));
        btnSelectTimeOFF->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectTimeOFF
      { btnSelectTX_pwr = new Fl_Check_Button(402, 212, 70, 15, _("TX Power"));
        btnSelectTX_pwr->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectTX_pwr
      { btnSelectRSTsent = new Fl_Check_Button(402, 233, 70, 15, _("RST sent"));
        btnSelectRSTsent->down_box(FL_DOWN_BOX);
        btnSelectRSTsent->value(1);
      } // Fl_Check_Button* btnSelectRSTsent
      { btnSelectRSTrcvd = new Fl_Check_Button(402, 253, 70, 15, _("RST rcvd"));
        btnSelectRSTrcvd->down_box(FL_DOWN_BOX);
        btnSelectRSTrcvd->value(1);
      } // Fl_Check_Button* btnSelectRSTrcvd
      { btnSelectQth = new Fl_Check_Button(402, 273, 70, 15, _("Qth"));
        btnSelectQth->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQth
      { btnSelectLOC = new Fl_Check_Button(402, 293, 70, 15, _("LOC"));
        btnSelectLOC->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectLOC
      { btnSelectState = new Fl_Check_Button(402, 313, 70, 15, _("State"));
        btnSelectState->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectState
      { btnSelectQSL_VIA = new Fl_Check_Button(402, 334, 70, 15, _("QSL-VIA"));
        btnSelectQSL_VIA->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQSL_VIA
      { btnSelectProvince = new Fl_Check_Button(533, 31, 70, 15, _("Province"));
        btnSelectProvince->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectProvince
      { btnSelectCountry = new Fl_Check_Button(533, 51, 70, 15, _("Country"));
        btnSelectCountry->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCountry
      { btnSelectNotes = new Fl_Check_Button(533, 71, 70, 15, _("Notes"));
        btnSelectNotes->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectNotes
      { btnSelectQSLrcvd = new Fl_Check_Button(533, 91, 70, 15, _("QSL rcvd date"));
        btnSelectQSLrcvd->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQSLrcvd
      { btnSelectQSLsent = new Fl_Check_Button(533, 112, 70, 15, _("QSL sent date"));
        btnSelectQSLsent->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectQSLsent
      { btnSelectSerialIN = new Fl_Check_Button(533, 132, 70, 15, _("Serial # in"));
        btnSelectSerialIN->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectSerialIN
      { btnSelectSerialOUT = new Fl_Check_Button(533, 152, 70, 15, _("Serial # out"));
        btnSelectSerialOUT->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectSerialOUT
      { btnSelectXchgIn = new Fl_Check_Button(533, 172, 70, 15, _("Exchange In"));
        btnSelectXchgIn->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectXchgIn
      { btnSelectMyXchg = new Fl_Check_Button(533, 193, 70, 15, _("Exchange Out"));
        btnSelectMyXchg->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectMyXchg
      { btnSelectCNTY = new Fl_Check_Button(533, 213, 70, 15, _("County"));
        btnSelectCNTY->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCNTY
      { btnSelectCONT = new Fl_Check_Button(533, 233, 70, 15, _("Continent"));
        btnSelectCONT->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCONT
      { btnSelectCQZ = new Fl_Check_Button(533, 253, 70, 15, _("CQZ"));
        btnSelectCQZ->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectCQZ
      { btnSelectDXCC = new Fl_Check_Button(533, 274, 70, 15, _("DXCC"));
        btnSelectDXCC->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectDXCC
      { btnSelectIOTA = new Fl_Check_Button(533, 294, 70, 15, _("IOTA"));
        btnSelectIOTA->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectIOTA
      { btnSelectITUZ = new Fl_Check_Button(533, 314, 70, 15, _("ITUZ"));
        btnSelectITUZ->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectITUZ
      { btnSelectClass = new Fl_Check_Button(533, 334, 70, 15, _("FD class"));
        btnSelectClass->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectClass
      { btnSelectSection = new Fl_Check_Button(533, 355, 70, 15, _("FD section"));
        btnSelectSection->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* btnSelectSection
      { btnSetFieldDefaults = new Fl_Button(488, 377, 85, 24, _("Defaults"));
        btnSetFieldDefaults->callback((Fl_Callback*)cb_btnSetFieldDefaults);
      } // Fl_Button* btnSetFieldDefaults
      { btnSetLoTWfields = new Fl_Button(581, 377, 85, 24, _("LoTW"));
        btnSetLoTWfields->callback((Fl_Callback*)cb_btnSetLoTWfields);
      } // Fl_Button* btnSetLoTWfields
      o->end();
    } // Fl_Group* o
    wExport->end();
  } // Fl_Double_Window* wExport
  { dlgLogbook = new Fl_Double_Window(590, 490, _("Logbook"));
    { inpDate_log = new Fl_DateInput(4, 24, 100, 24, _("Date On"));
      inpDate_log->tooltip(_("Date QSO started"));
      inpDate_log->box(FL_DOWN_BOX);
      inpDate_log->color(FL_BACKGROUND2_COLOR);
      inpDate_log->selection_color(FL_SELECTION_COLOR);
      inpDate_log->labeltype(FL_NORMAL_LABEL);
      inpDate_log->labelfont(0);
      inpDate_log->labelsize(14);
      inpDate_log->labelcolor(FL_FOREGROUND_COLOR);
      inpDate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpDate_log->when(FL_WHEN_RELEASE);
      inpDate_log->format(2);
    } // Fl_DateInput* inpDate_log
    { inpTimeOn_log = new Fl_Input2(106, 24, 70, 24, _("Time On"));
      inpTimeOn_log->tooltip(_("Time QSO started"));
      inpTimeOn_log->box(FL_DOWN_BOX);
      inpTimeOn_log->color(FL_BACKGROUND2_COLOR);
      inpTimeOn_log->selection_color(FL_SELECTION_COLOR);
      inpTimeOn_log->labeltype(FL_NORMAL_LABEL);
      inpTimeOn_log->labelfont(0);
      inpTimeOn_log->labelsize(14);
      inpTimeOn_log->labelcolor(FL_FOREGROUND_COLOR);
      inpTimeOn_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpTimeOn_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpTimeOn_log
    { inpCall_log = new Fl_Input2(178, 24, 100, 24, _("Call"));
      inpCall_log->tooltip(_("Call sign worked"));
      inpCall_log->box(FL_DOWN_BOX);
      inpCall_log->color(FL_BACKGROUND2_COLOR);
      inpCall_log->selection_color(FL_SELECTION_COLOR);
      inpCall_log->labeltype(FL_NORMAL_LABEL);
      inpCall_log->labelfont(0);
      inpCall_log->labelsize(14);
      inpCall_log->labelcolor(FL_FOREGROUND_COLOR);
      inpCall_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpCall_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpCall_log
    { inpName_log = new Fl_Input2(280, 24, 185, 24, _("Name"));
      inpName_log->tooltip(_("Operator worked"));
      inpName_log->box(FL_DOWN_BOX);
      inpName_log->color(FL_BACKGROUND2_COLOR);
      inpName_log->selection_color(FL_SELECTION_COLOR);
      inpName_log->labeltype(FL_NORMAL_LABEL);
      inpName_log->labelfont(0);
      inpName_log->labelsize(14);
      inpName_log->labelcolor(FL_FOREGROUND_COLOR);
      inpName_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpName_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpName_log
    { inpRstR_log = new Fl_Input2(468, 24, 36, 24, _("In"));
      inpRstR_log->tooltip(_("Rst received"));
      inpRstR_log->box(FL_DOWN_BOX);
      inpRstR_log->color(FL_BACKGROUND2_COLOR);
      inpRstR_log->selection_color(FL_SELECTION_COLOR);
      inpRstR_log->labeltype(FL_NORMAL_LABEL);
      inpRstR_log->labelfont(0);
      inpRstR_log->labelsize(14);
      inpRstR_log->labelcolor(FL_FOREGROUND_COLOR);
      inpRstR_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpRstR_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpRstR_log
    { inpDateOff_log = new Fl_DateInput(4, 68, 100, 24, _("Date Off"));
      inpDateOff_log->tooltip(_("Date QSO Ended"));
      inpDateOff_log->box(FL_DOWN_BOX);
      inpDateOff_log->color(FL_BACKGROUND2_COLOR);
      inpDateOff_log->selection_color(FL_SELECTION_COLOR);
      inpDateOff_log->labeltype(FL_NORMAL_LABEL);
      inpDateOff_log->labelfont(0);
      inpDateOff_log->labelsize(14);
      inpDateOff_log->labelcolor(FL_FOREGROUND_COLOR);
      inpDateOff_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpDateOff_log->when(FL_WHEN_RELEASE);
      inpDateOff_log->format(2);
    } // Fl_DateInput* inpDateOff_log
    { inpTimeOff_log = new Fl_Input2(106, 68, 70, 24, _("Time Off"));
      inpTimeOff_log->tooltip(_("Time QSO ended"));
      inpTimeOff_log->box(FL_DOWN_BOX);
      inpTimeOff_log->color(FL_BACKGROUND2_COLOR);
      inpTimeOff_log->selection_color(FL_SELECTION_COLOR);
      inpTimeOff_log->labeltype(FL_NORMAL_LABEL);
      inpTimeOff_log->labelfont(0);
      inpTimeOff_log->labelsize(14);
      inpTimeOff_log->labelcolor(FL_FOREGROUND_COLOR);
      inpTimeOff_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpTimeOff_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpTimeOff_log
    { inpFreq_log = new Fl_Input2(178, 68, 100, 24, _("Freq."));
      inpFreq_log->tooltip(_("Frequency in MHz"));
      inpFreq_log->box(FL_DOWN_BOX);
      inpFreq_log->color(FL_BACKGROUND2_COLOR);
      inpFreq_log->selection_color(FL_SELECTION_COLOR);
      inpFreq_log->labeltype(FL_NORMAL_LABEL);
      inpFreq_log->labelfont(0);
      inpFreq_log->labelsize(14);
      inpFreq_log->labelcolor(FL_FOREGROUND_COLOR);
      inpFreq_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpFreq_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpFreq_log
    { inpMode_log = new Fl_Input2(280, 68, 146, 24, _("Mode"));
      inpMode_log->tooltip(_("Mode in use"));
      inpMode_log->box(FL_DOWN_BOX);
      inpMode_log->color(FL_BACKGROUND2_COLOR);
      inpMode_log->selection_color(FL_SELECTION_COLOR);
      inpMode_log->labeltype(FL_NORMAL_LABEL);
      inpMode_log->labelfont(0);
      inpMode_log->labelsize(14);
      inpMode_log->labelcolor(FL_FOREGROUND_COLOR);
      inpMode_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpMode_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpMode_log
    { inpTX_pwr_log = new Fl_Input2(429, 68, 36, 24, _("Pwr"));
      inpTX_pwr_log->tooltip(_("Transmit power used"));
      inpTX_pwr_log->box(FL_DOWN_BOX);
      inpTX_pwr_log->color(FL_BACKGROUND2_COLOR);
      inpTX_pwr_log->selection_color(FL_SELECTION_COLOR);
      inpTX_pwr_log->labeltype(FL_NORMAL_LABEL);
      inpTX_pwr_log->labelfont(0);
      inpTX_pwr_log->labelsize(14);
      inpTX_pwr_log->labelcolor(FL_FOREGROUND_COLOR);
      inpTX_pwr_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpTX_pwr_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpTX_pwr_log
    { inpRstS_log = new Fl_Input2(468, 68, 36, 24, _("Out"));
      inpRstS_log->tooltip(_("Rst sent"));
      inpRstS_log->box(FL_DOWN_BOX);
      inpRstS_log->color(FL_BACKGROUND2_COLOR);
      inpRstS_log->selection_color(FL_SELECTION_COLOR);
      inpRstS_log->labeltype(FL_NORMAL_LABEL);
      inpRstS_log->labelfont(0);
      inpRstS_log->labelsize(14);
      inpRstS_log->labelcolor(FL_FOREGROUND_COLOR);
      inpRstS_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpRstS_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpRstS_log
    { inpQth_log = new Fl_Input2(5, 112, 280, 24, _("Qth"));
      inpQth_log->tooltip(_("City of station worked"));
      inpQth_log->box(FL_DOWN_BOX);
      inpQth_log->color(FL_BACKGROUND2_COLOR);
      inpQth_log->selection_color(FL_SELECTION_COLOR);
      inpQth_log->labeltype(FL_NORMAL_LABEL);
      inpQth_log->labelfont(0);
      inpQth_log->labelsize(14);
      inpQth_log->labelcolor(FL_FOREGROUND_COLOR);
      inpQth_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpQth_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpQth_log
    { inpState_log = new Fl_Input2(288, 112, 44, 24, _("St"));
      inpState_log->tooltip(_("US state of station worked"));
      inpState_log->box(FL_DOWN_BOX);
      inpState_log->color(FL_BACKGROUND2_COLOR);
      inpState_log->selection_color(FL_SELECTION_COLOR);
      inpState_log->labeltype(FL_NORMAL_LABEL);
      inpState_log->labelfont(0);
      inpState_log->labelsize(14);
      inpState_log->labelcolor(FL_FOREGROUND_COLOR);
      inpState_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpState_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpState_log
    { inpVE_Prov_log = new Fl_Input2(335, 112, 44, 24, _("Pr"));
      inpVE_Prov_log->tooltip(_("Province of station worked"));
      inpVE_Prov_log->box(FL_DOWN_BOX);
      inpVE_Prov_log->color(FL_BACKGROUND2_COLOR);
      inpVE_Prov_log->selection_color(FL_SELECTION_COLOR);
      inpVE_Prov_log->labeltype(FL_NORMAL_LABEL);
      inpVE_Prov_log->labelfont(0);
      inpVE_Prov_log->labelsize(14);
      inpVE_Prov_log->labelcolor(FL_FOREGROUND_COLOR);
      inpVE_Prov_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpVE_Prov_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpVE_Prov_log
    { inpLoc_log = new Fl_Input2(508, 68, 76, 24, _("Loc"));
      inpLoc_log->tooltip(_("Stations grid square"));
      inpLoc_log->box(FL_DOWN_BOX);
      inpLoc_log->color(FL_BACKGROUND2_COLOR);
      inpLoc_log->selection_color(FL_SELECTION_COLOR);
      inpLoc_log->labeltype(FL_NORMAL_LABEL);
      inpLoc_log->labelfont(0);
      inpLoc_log->labelsize(14);
      inpLoc_log->labelcolor(FL_FOREGROUND_COLOR);
      inpLoc_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpLoc_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpLoc_log
    { inpCountry_log = new Fl_Input2(382, 112, 202, 24, _("Country"));
      inpCountry_log->tooltip(_("Country of station worked"));
      inpCountry_log->box(FL_DOWN_BOX);
      inpCountry_log->color(FL_BACKGROUND2_COLOR);
      inpCountry_log->selection_color(FL_SELECTION_COLOR);
      inpCountry_log->labeltype(FL_NORMAL_LABEL);
      inpCountry_log->labelfont(0);
      inpCountry_log->labelsize(14);
      inpCountry_log->labelcolor(FL_FOREGROUND_COLOR);
      inpCountry_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      inpCountry_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpCountry_log
    { Tabs = new Fl_Tabs(5, 140, 474, 120);
      { tab_log_qsl = new Fl_Group(5, 162, 474, 94, _("QSL"));
        { Fl_DateInput* o = inpQSLrcvddate_log = new Fl_DateInput(9, 183, 100, 24, _("QSL-rcvd"));
          inpQSLrcvddate_log->tooltip(_("QSL received on this date"));
          inpQSLrcvddate_log->box(FL_DOWN_BOX);
          inpQSLrcvddate_log->color(FL_BACKGROUND2_COLOR);
          inpQSLrcvddate_log->selection_color(FL_SELECTION_COLOR);
          inpQSLrcvddate_log->labeltype(FL_NORMAL_LABEL);
          inpQSLrcvddate_log->labelfont(0);
          inpQSLrcvddate_log->labelsize(14);
          inpQSLrcvddate_log->labelcolor(FL_FOREGROUND_COLOR);
          inpQSLrcvddate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpQSLrcvddate_log->when(FL_WHEN_RELEASE);
          o->format(2);
        } // Fl_DateInput* inpQSLrcvddate_log
        { Fl_DateInput* o = inpEQSLrcvddate_log = new Fl_DateInput(113, 183, 100, 24, _("EQSL-rcvd"));
          inpEQSLrcvddate_log->tooltip(_("QSL received on this date"));
          inpEQSLrcvddate_log->box(FL_DOWN_BOX);
          inpEQSLrcvddate_log->color(FL_BACKGROUND2_COLOR);
          inpEQSLrcvddate_log->selection_color(FL_SELECTION_COLOR);
          inpEQSLrcvddate_log->labeltype(FL_NORMAL_LABEL);
          inpEQSLrcvddate_log->labelfont(0);
          inpEQSLrcvddate_log->labelsize(14);
          inpEQSLrcvddate_log->labelcolor(FL_FOREGROUND_COLOR);
          inpEQSLrcvddate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpEQSLrcvddate_log->when(FL_WHEN_RELEASE);
          o->format(2);
        } // Fl_DateInput* inpEQSLrcvddate_log
        { Fl_DateInput* o = inpLOTWrcvddate_log = new Fl_DateInput(217, 183, 100, 24, _("LOTW-rcvd"));
          inpLOTWrcvddate_log->tooltip(_("QSL received on this date"));
          inpLOTWrcvddate_log->box(FL_DOWN_BOX);
          inpLOTWrcvddate_log->color(FL_BACKGROUND2_COLOR);
          inpLOTWrcvddate_log->selection_color(FL_SELECTION_COLOR);
          inpLOTWrcvddate_log->labeltype(FL_NORMAL_LABEL);
          inpLOTWrcvddate_log->labelfont(0);
          inpLOTWrcvddate_log->labelsize(14);
          inpLOTWrcvddate_log->labelcolor(FL_FOREGROUND_COLOR);
          inpLOTWrcvddate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpLOTWrcvddate_log->when(FL_WHEN_RELEASE);
          o->format(2);
        } // Fl_DateInput* inpLOTWrcvddate_log
        { Fl_DateInput* o = inpQSLsentdate_log = new Fl_DateInput(9, 229, 100, 24, _("QSL-sent"));
          inpQSLsentdate_log->tooltip(_("QSL sent on this date"));
          inpQSLsentdate_log->box(FL_DOWN_BOX);
          inpQSLsentdate_log->color(FL_BACKGROUND2_COLOR);
          inpQSLsentdate_log->selection_color(FL_SELECTION_COLOR);
          inpQSLsentdate_log->labeltype(FL_NORMAL_LABEL);
          inpQSLsentdate_log->labelfont(0);
          inpQSLsentdate_log->labelsize(14);
          inpQSLsentdate_log->labelcolor(FL_FOREGROUND_COLOR);
          inpQSLsentdate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpQSLsentdate_log->when(FL_WHEN_RELEASE);
          o->format(2);
        } // Fl_DateInput* inpQSLsentdate_log
        { Fl_DateInput* o = inpEQSLsentdate_log = new Fl_DateInput(113, 229, 100, 24, _("EQSL-sent"));
          inpEQSLsentdate_log->tooltip(_("QSL sent on this date"));
          inpEQSLsentdate_log->box(FL_DOWN_BOX);
          inpEQSLsentdate_log->color(FL_BACKGROUND2_COLOR);
          inpEQSLsentdate_log->selection_color(FL_SELECTION_COLOR);
          inpEQSLsentdate_log->labeltype(FL_NORMAL_LABEL);
          inpEQSLsentdate_log->labelfont(0);
          inpEQSLsentdate_log->labelsize(14);
          inpEQSLsentdate_log->labelcolor(FL_FOREGROUND_COLOR);
          inpEQSLsentdate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpEQSLsentdate_log->when(FL_WHEN_RELEASE);
          o->format(2);
        } // Fl_DateInput* inpEQSLsentdate_log
        { Fl_DateInput* o = inpLOTWsentdate_log = new Fl_DateInput(217, 229, 100, 24, _("LOTW-sent"));
          inpLOTWsentdate_log->tooltip(_("QSL sent on this date"));
          inpLOTWsentdate_log->box(FL_DOWN_BOX);
          inpLOTWsentdate_log->color(FL_BACKGROUND2_COLOR);
          inpLOTWsentdate_log->selection_color(FL_SELECTION_COLOR);
          inpLOTWsentdate_log->labeltype(FL_NORMAL_LABEL);
          inpLOTWsentdate_log->labelfont(0);
          inpLOTWsentdate_log->labelsize(14);
          inpLOTWsentdate_log->labelcolor(FL_FOREGROUND_COLOR);
          inpLOTWsentdate_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpLOTWsentdate_log->when(FL_WHEN_RELEASE);
          o->format(2);
        } // Fl_DateInput* inpLOTWsentdate_log
        { inpQSL_VIA_log = new Fl_Input2(320, 183, 155, 70, _("QSL-VIA"));
          inpQSL_VIA_log->tooltip(_("QSL route of contacted station"));
          inpQSL_VIA_log->type(4);
          inpQSL_VIA_log->box(FL_DOWN_BOX);
          inpQSL_VIA_log->color(FL_BACKGROUND2_COLOR);
          inpQSL_VIA_log->selection_color(FL_SELECTION_COLOR);
          inpQSL_VIA_log->labeltype(FL_NORMAL_LABEL);
          inpQSL_VIA_log->labelfont(0);
          inpQSL_VIA_log->labelsize(14);
          inpQSL_VIA_log->labelcolor(FL_FOREGROUND_COLOR);
          inpQSL_VIA_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpQSL_VIA_log->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(inpQSL_VIA_log);
        } // Fl_Input2* inpQSL_VIA_log
        tab_log_qsl->end();
      } // Fl_Group* tab_log_qsl
      { tab_log_contest = new Fl_Group(5, 162, 474, 94, _("Contest"));
        tab_log_contest->hide();
        { inpSerNoOut_log = new Fl_Input2(72, 174, 55, 24, _("Ser out"));
          inpSerNoOut_log->tooltip(_("Contest seral # sent"));
          inpSerNoOut_log->box(FL_DOWN_BOX);
          inpSerNoOut_log->color(FL_BACKGROUND2_COLOR);
          inpSerNoOut_log->selection_color(FL_SELECTION_COLOR);
          inpSerNoOut_log->labeltype(FL_NORMAL_LABEL);
          inpSerNoOut_log->labelfont(0);
          inpSerNoOut_log->labelsize(14);
          inpSerNoOut_log->labelcolor(FL_FOREGROUND_COLOR);
          inpSerNoOut_log->align(Fl_Align(FL_ALIGN_LEFT));
          inpSerNoOut_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpSerNoOut_log
        { inpMyXchg_log = new Fl_Input2(210, 174, 263, 24, _("Exch Out"));
          inpMyXchg_log->tooltip(_("Contest exchange sent"));
          inpMyXchg_log->box(FL_DOWN_BOX);
          inpMyXchg_log->color(FL_BACKGROUND2_COLOR);
          inpMyXchg_log->selection_color(FL_SELECTION_COLOR);
          inpMyXchg_log->labeltype(FL_NORMAL_LABEL);
          inpMyXchg_log->labelfont(0);
          inpMyXchg_log->labelsize(14);
          inpMyXchg_log->labelcolor(FL_FOREGROUND_COLOR);
          inpMyXchg_log->align(Fl_Align(FL_ALIGN_LEFT));
          inpMyXchg_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpMyXchg_log
        { inpSerNoIn_log = new Fl_Input2(72, 202, 55, 24, _("Ser in"));
          inpSerNoIn_log->tooltip(_("Contest serial # received"));
          inpSerNoIn_log->box(FL_DOWN_BOX);
          inpSerNoIn_log->color(FL_BACKGROUND2_COLOR);
          inpSerNoIn_log->selection_color(FL_SELECTION_COLOR);
          inpSerNoIn_log->labeltype(FL_NORMAL_LABEL);
          inpSerNoIn_log->labelfont(0);
          inpSerNoIn_log->labelsize(14);
          inpSerNoIn_log->labelcolor(FL_FOREGROUND_COLOR);
          inpSerNoIn_log->align(Fl_Align(FL_ALIGN_LEFT));
          inpSerNoIn_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpSerNoIn_log
        { inpXchgIn_log = new Fl_Input2(210, 202, 263, 24, _("Exch In"));
          inpXchgIn_log->tooltip(_("Contest exchange received"));
          inpXchgIn_log->box(FL_DOWN_BOX);
          inpXchgIn_log->color(FL_BACKGROUND2_COLOR);
          inpXchgIn_log->selection_color(FL_SELECTION_COLOR);
          inpXchgIn_log->labeltype(FL_NORMAL_LABEL);
          inpXchgIn_log->labelfont(0);
          inpXchgIn_log->labelsize(14);
          inpXchgIn_log->labelcolor(FL_FOREGROUND_COLOR);
          inpXchgIn_log->align(Fl_Align(FL_ALIGN_LEFT));
          inpXchgIn_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpXchgIn_log
        { inp_FD_class_log = new Fl_Input2(72, 231, 55, 24, _("FD class"));
          inp_FD_class_log->tooltip(_("Contest serial # received"));
          inp_FD_class_log->box(FL_DOWN_BOX);
          inp_FD_class_log->color(FL_BACKGROUND2_COLOR);
          inp_FD_class_log->selection_color(FL_SELECTION_COLOR);
          inp_FD_class_log->labeltype(FL_NORMAL_LABEL);
          inp_FD_class_log->labelfont(0);
          inp_FD_class_log->labelsize(14);
          inp_FD_class_log->labelcolor(FL_FOREGROUND_COLOR);
          inp_FD_class_log->align(Fl_Align(FL_ALIGN_LEFT));
          inp_FD_class_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inp_FD_class_log
        { inp_FD_section_log = new Fl_Input2(210, 231, 55, 24, _("FD section"));
          inp_FD_section_log->tooltip(_("Contest serial # received"));
          inp_FD_section_log->box(FL_DOWN_BOX);
          inp_FD_section_log->color(FL_BACKGROUND2_COLOR);
          inp_FD_section_log->selection_color(FL_SELECTION_COLOR);
          inp_FD_section_log->labeltype(FL_NORMAL_LABEL);
          inp_FD_section_log->labelfont(0);
          inp_FD_section_log->labelsize(14);
          inp_FD_section_log->labelcolor(FL_FOREGROUND_COLOR);
          inp_FD_section_log->align(Fl_Align(FL_ALIGN_LEFT));
          inp_FD_section_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inp_FD_section_log
        tab_log_contest->end();
      } // Fl_Group* tab_log_contest
      { tab_log_other = new Fl_Group(5, 162, 474, 94, _("Other"));
        tab_log_other->hide();
        { inpCNTY_log = new Fl_Input2(16, 182, 240, 24, _("County"));
          inpCNTY_log->tooltip(_("County"));
          inpCNTY_log->box(FL_DOWN_BOX);
          inpCNTY_log->color(FL_BACKGROUND2_COLOR);
          inpCNTY_log->selection_color(FL_SELECTION_COLOR);
          inpCNTY_log->labeltype(FL_NORMAL_LABEL);
          inpCNTY_log->labelfont(0);
          inpCNTY_log->labelsize(14);
          inpCNTY_log->labelcolor(FL_FOREGROUND_COLOR);
          inpCNTY_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpCNTY_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpCNTY_log
        { inpIOTA_log = new Fl_Input2(270, 182, 90, 24, _("IOTA"));
          inpIOTA_log->tooltip(_("Islands on the air"));
          inpIOTA_log->box(FL_DOWN_BOX);
          inpIOTA_log->color(FL_BACKGROUND2_COLOR);
          inpIOTA_log->selection_color(FL_SELECTION_COLOR);
          inpIOTA_log->labeltype(FL_NORMAL_LABEL);
          inpIOTA_log->labelfont(0);
          inpIOTA_log->labelsize(14);
          inpIOTA_log->labelcolor(FL_FOREGROUND_COLOR);
          inpIOTA_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpIOTA_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpIOTA_log
        { inpCQZ_log = new Fl_Input2(377, 182, 90, 24, _("CQZ"));
          inpCQZ_log->tooltip(_("CQ zone"));
          inpCQZ_log->box(FL_DOWN_BOX);
          inpCQZ_log->color(FL_BACKGROUND2_COLOR);
          inpCQZ_log->selection_color(FL_SELECTION_COLOR);
          inpCQZ_log->labeltype(FL_NORMAL_LABEL);
          inpCQZ_log->labelfont(0);
          inpCQZ_log->labelsize(14);
          inpCQZ_log->labelcolor(FL_FOREGROUND_COLOR);
          inpCQZ_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpCQZ_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpCQZ_log
        { inpCONT_log = new Fl_Input2(16, 226, 240, 24, _("Cont\'"));
          inpCONT_log->tooltip(_("Continent"));
          inpCONT_log->box(FL_DOWN_BOX);
          inpCONT_log->color(FL_BACKGROUND2_COLOR);
          inpCONT_log->selection_color(FL_SELECTION_COLOR);
          inpCONT_log->labeltype(FL_NORMAL_LABEL);
          inpCONT_log->labelfont(0);
          inpCONT_log->labelsize(14);
          inpCONT_log->labelcolor(FL_FOREGROUND_COLOR);
          inpCONT_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpCONT_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpCONT_log
        { inpITUZ_log = new Fl_Input2(271, 226, 90, 24, _("ITUZ"));
          inpITUZ_log->tooltip(_("ITU zone"));
          inpITUZ_log->box(FL_DOWN_BOX);
          inpITUZ_log->color(FL_BACKGROUND2_COLOR);
          inpITUZ_log->selection_color(FL_SELECTION_COLOR);
          inpITUZ_log->labeltype(FL_NORMAL_LABEL);
          inpITUZ_log->labelfont(0);
          inpITUZ_log->labelsize(14);
          inpITUZ_log->labelcolor(FL_FOREGROUND_COLOR);
          inpITUZ_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpITUZ_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpITUZ_log
        { inpDXCC_log = new Fl_Input2(377, 226, 90, 24, _("DXCC"));
          inpDXCC_log->tooltip(_("DXCC designator"));
          inpDXCC_log->box(FL_DOWN_BOX);
          inpDXCC_log->color(FL_BACKGROUND2_COLOR);
          inpDXCC_log->selection_color(FL_SELECTION_COLOR);
          inpDXCC_log->labeltype(FL_NORMAL_LABEL);
          inpDXCC_log->labelfont(0);
          inpDXCC_log->labelsize(14);
          inpDXCC_log->labelcolor(FL_FOREGROUND_COLOR);
          inpDXCC_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          inpDXCC_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpDXCC_log
        tab_log_other->end();
      } // Fl_Group* tab_log_other
      { tab_log_notes = new Fl_Group(5, 162, 474, 94, _("Notes"));
        tab_log_notes->hide();
        { inpNotes_log = new Fl_Input2(10, 166, 464, 85);
          inpNotes_log->tooltip(_("Interesting notes"));
          inpNotes_log->type(4);
          inpNotes_log->box(FL_DOWN_BOX);
          inpNotes_log->color(FL_BACKGROUND2_COLOR);
          inpNotes_log->selection_color(FL_SELECTION_COLOR);
          inpNotes_log->labeltype(FL_NORMAL_LABEL);
          inpNotes_log->labelfont(0);
          inpNotes_log->labelsize(14);
          inpNotes_log->labelcolor(FL_FOREGROUND_COLOR);
          inpNotes_log->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          inpNotes_log->when(FL_WHEN_RELEASE);
        } // Fl_Input2* inpNotes_log
        tab_log_notes->end();
      } // Fl_Group* tab_log_notes
      Tabs->end();
    } // Fl_Tabs* Tabs
    { inpSearchString = new Fl_Input2(483, 161, 105, 24, _("Call Search"));
      inpSearchString->tooltip(_("Search for this callsign"));
      inpSearchString->box(FL_DOWN_BOX);
      inpSearchString->color(FL_BACKGROUND2_COLOR);
      inpSearchString->selection_color(FL_SELECTION_COLOR);
      inpSearchString->labeltype(FL_NORMAL_LABEL);
      inpSearchString->labelfont(0);
      inpSearchString->labelsize(14);
      inpSearchString->labelcolor(FL_FOREGROUND_COLOR);
      inpSearchString->align(Fl_Align(FL_ALIGN_TOP));
      inpSearchString->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpSearchString
    { txtNbrRecs_log = new Fl_Input2(520, 24, 65, 24, _("Recs"));
      txtNbrRecs_log->tooltip(_("# Records in logbook"));
      txtNbrRecs_log->box(FL_DOWN_BOX);
      txtNbrRecs_log->color(FL_BACKGROUND2_COLOR);
      txtNbrRecs_log->selection_color(FL_SELECTION_COLOR);
      txtNbrRecs_log->labeltype(FL_NORMAL_LABEL);
      txtNbrRecs_log->labelfont(0);
      txtNbrRecs_log->labelsize(14);
      txtNbrRecs_log->labelcolor(FL_FOREGROUND_COLOR);
      txtNbrRecs_log->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      txtNbrRecs_log->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txtNbrRecs_log
    { bNewSave = new Fl_Button(395, 263, 59, 22, _("New"));
      bNewSave->tooltip(_("New record / Save record"));
      bNewSave->shortcut(0x8004e);
      bNewSave->color(FL_LIGHT1);
      bNewSave->selection_color((Fl_Color)48);
      bNewSave->callback((Fl_Callback*)cb_btnNewSave);
    } // Fl_Button* bNewSave
    { bUpdateCancel = new Fl_Button(458, 263, 59, 22, _("Update"));
      bUpdateCancel->tooltip(_("Update the current record"));
      bUpdateCancel->shortcut(0x80055);
      bUpdateCancel->color(FL_LIGHT1);
      bUpdateCancel->selection_color((Fl_Color)48);
      bUpdateCancel->callback((Fl_Callback*)cb_btnUpdateCancel);
    } // Fl_Button* bUpdateCancel
    { bDelete = new Fl_Button(521, 263, 59, 22, _("Delete"));
      bDelete->tooltip(_("Delete the current record"));
      bDelete->shortcut(0x80044);
      bDelete->color(FL_LIGHT1);
      bDelete->selection_color((Fl_Color)48);
      bDelete->callback((Fl_Callback*)cb_btnDelete);
    } // Fl_Button* bDelete
    { bRetrieve = new Fl_Button(502, 223, 75, 22, _("Retrieve"));
      bRetrieve->tooltip(_("Retrieve for active modem use"));
      bRetrieve->shortcut(0x50066);
      bRetrieve->color(FL_LIGHT1);
      bRetrieve->selection_color((Fl_Color)48);
      bRetrieve->callback((Fl_Callback*)cb_btnRetrieve);
    } // Fl_Button* bRetrieve
    { bSearchPrev = new Fl_Button(499, 193, 24, 22);
      bSearchPrev->tooltip(_("Find previous"));
      bSearchPrev->color(FL_LIGHT1);
      bSearchPrev->selection_color((Fl_Color)48);
      bSearchPrev->callback((Fl_Callback*)cb_search);
      bSearchPrev->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      bSearchPrev->image(new Fl_Pixmap(left_arrow_icon));
    } // Fl_Button* bSearchPrev
    { bSearchNext = new Fl_Button(551, 193, 24, 22);
      bSearchNext->tooltip(_("Find next"));
      bSearchNext->color(FL_LIGHT1);
      bSearchNext->selection_color((Fl_Color)48);
      bSearchNext->callback((Fl_Callback*)cb_search);
      bSearchNext->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      bSearchNext->image(new Fl_Pixmap(right_arrow_icon));
    } // Fl_Button* bSearchNext
    { wBrowser = new Table(2, 289, 586, 195);
      wBrowser->box(FL_DOWN_FRAME);
      wBrowser->color(FL_BACKGROUND2_COLOR);
      wBrowser->selection_color(FL_SELECTION_COLOR);
      wBrowser->labeltype(FL_NORMAL_LABEL);
      wBrowser->labelfont(0);
      wBrowser->labelsize(14);
      wBrowser->labelcolor(FL_FOREGROUND_COLOR);
      wBrowser->align(Fl_Align(FL_ALIGN_TOP));
      wBrowser->when(FL_WHEN_RELEASE);
      wBrowser->end();
      Fl_Group::current()->resizable(wBrowser);
    } // Table* wBrowser
    { txtLogFile = new Fl_Output(5, 263, 384, 22, _("File:"));
      txtLogFile->color(FL_LIGHT3);
    } // Fl_Output* txtLogFile
    dlgLogbook->end();
  } // Fl_Double_Window* dlgLogbook
  wBrowser->align (FL_ALIGN_TOP | FL_ALIGN_LEFT);
  wBrowser->addColumn (_("Date"),85);
  wBrowser->colcallback (0,cb_SortByDate);
  wBrowser->addColumn (_("Time"),47);
  wBrowser->addColumn (_("Callsign"),100);
  wBrowser->colcallback (2,cb_SortByCall);
  wBrowser->addColumn (_("Name"),110);
  wBrowser->addColumn (_("Frequency"),120);
  wBrowser->colcallback (4,cb_SortByFreq);
  wBrowser->addColumn (_("Mode"),103);
  wBrowser->colcallback (5,cb_SortByMode);
  wBrowser->addHiddenColumn ("rn");
  wBrowser->allowSort(true);
  wBrowser->callback(cb_browser);
  wBrowser->when(FL_WHEN_CHANGED);
  wBrowser->rowSize (FL_NORMAL_SIZE);
  wBrowser->headerSize (FL_NORMAL_SIZE);
  wBrowser->allowResize (1);
  wBrowser->gridEnabled (0);
  dlgLogbook->xclass(PACKAGE_TARNAME);
  { wCabrillo = new Fl_Double_Window(675, 340, _("Cabrillo Setup"));
    { Fl_Group* o = new Fl_Group(4, 4, 388, 305, _("Select Records to Export"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { chkCabBrowser = new Fl_Check_Browser(13, 25, 370, 245);
      } // Fl_Check_Browser* chkCabBrowser
      { btnCabClearAll = new Fl_Button(69, 277, 110, 24, _("Clear All"));
        btnCabClearAll->callback((Fl_Callback*)cb_btnCabClearAll);
      } // Fl_Button* btnCabClearAll
      { btnCabCheckAll = new Fl_Button(200, 277, 110, 24, _("Check All"));
        btnCabCheckAll->callback((Fl_Callback*)cb_btnCabCheckAll);
      } // Fl_Button* btnCabCheckAll
      o->end();
    } // Fl_Group* o
    { btnCabOK = new Fl_Return_Button(544, 312, 100, 24, _("OK"));
      btnCabOK->callback((Fl_Callback*)cb_btnCabOK);
    } // Fl_Return_Button* btnCabOK
    { btnCabCancel = new Fl_Button(414, 312, 100, 24, _("Cancel"));
      btnCabCancel->callback((Fl_Callback*)cb_btnCabCancel);
    } // Fl_Button* btnCabCancel
    { Fl_Group* o = new Fl_Group(390, 4, 283, 305, _("Select Cabrillo Contest & Fields"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { cboContest = new Fl_ComboBox(486, 41, 180, 20, _("Contest:"));
        cboContest->box(FL_BORDER_BOX);
        cboContest->color(FL_BACKGROUND2_COLOR);
        cboContest->selection_color(FL_BACKGROUND_COLOR);
        cboContest->labeltype(FL_NORMAL_LABEL);
        cboContest->labelfont(0);
        cboContest->labelsize(14);
        cboContest->labelcolor(FL_FOREGROUND_COLOR);
        cboContest->callback((Fl_Callback*)cb_cboContest);
        cboContest->align(Fl_Align(FL_ALIGN_LEFT));
        cboContest->when(FL_WHEN_RELEASE);
        cboContest->end();
      } // Fl_ComboBox* cboContest
      { btnCabCall = new Fl_Check_Button(423, 75, 70, 16, _("Call"));
        btnCabCall->down_box(FL_DOWN_BOX);
        btnCabCall->value(1);
      } // Fl_Check_Button* btnCabCall
      { btnCabFreq = new Fl_Check_Button(423, 100, 70, 15, _("Freq"));
        btnCabFreq->down_box(FL_DOWN_BOX);
        btnCabFreq->value(1);
      } // Fl_Check_Button* btnCabFreq
      { btnCabMode = new Fl_Check_Button(423, 124, 70, 15, _("Mode"));
        btnCabMode->down_box(FL_DOWN_BOX);
        btnCabMode->value(1);
      } // Fl_Check_Button* btnCabMode
      { btnCabQSOdate = new Fl_Check_Button(423, 148, 70, 15, _("QSO Date"));
        btnCabQSOdate->down_box(FL_DOWN_BOX);
        btnCabQSOdate->value(1);
      } // Fl_Check_Button* btnCabQSOdate
      { btnCabTimeOFF = new Fl_Check_Button(423, 172, 70, 15, _("Time OFF"));
        btnCabTimeOFF->down_box(FL_DOWN_BOX);
        btnCabTimeOFF->value(1);
      } // Fl_Check_Button* btnCabTimeOFF
      { btnCabRSTsent = new Fl_Check_Button(423, 196, 70, 15, _("RST sent"));
        btnCabRSTsent->down_box(FL_DOWN_BOX);
        btnCabRSTsent->value(1);
      } // Fl_Check_Button* btnCabRSTsent
      { btnCabRSTrcvd = new Fl_Check_Button(423, 221, 70, 16, _("RST rcvd"));
        btnCabRSTrcvd->down_box(FL_DOWN_BOX);
        btnCabRSTrcvd->value(1);
      } // Fl_Check_Button* btnCabRSTrcvd
      { btnCabSerialIN = new Fl_Check_Button(533, 100, 70, 15, _("Serial # in"));
        btnCabSerialIN->down_box(FL_DOWN_BOX);
        btnCabSerialIN->value(1);
      } // Fl_Check_Button* btnCabSerialIN
      { btnCabSerialOUT = new Fl_Check_Button(533, 124, 70, 15, _("Serial # out"));
        btnCabSerialOUT->down_box(FL_DOWN_BOX);
        btnCabSerialOUT->value(1);
      } // Fl_Check_Button* btnCabSerialOUT
      { btnCabXchgIn = new Fl_Check_Button(533, 148, 70, 15, _("Exchange In"));
        btnCabXchgIn->down_box(FL_DOWN_BOX);
        btnCabXchgIn->value(1);
      } // Fl_Check_Button* btnCabXchgIn
      { btnCabMyXchg = new Fl_Check_Button(533, 172, 70, 15, _("Exchange Out"));
        btnCabMyXchg->down_box(FL_DOWN_BOX);
        btnCabMyXchg->value(1);
      } // Fl_Check_Button* btnCabMyXchg
      { btnCabClearAllFields = new Fl_Button(409, 277, 110, 24, _("Clear All"));
        btnCabClearAllFields->callback((Fl_Callback*)cb_btnCabClearAllFields);
      } // Fl_Button* btnCabClearAllFields
      { btnCabCheckAllFields = new Fl_Button(539, 277, 110, 24, _("Check All"));
        btnCabCheckAllFields->callback((Fl_Callback*)cb_btnCabCheckAllFields);
      } // Fl_Button* btnCabCheckAllFields
      o->end();
    } // Fl_Group* o
    wCabrillo->end();
  } // Fl_Double_Window* wCabrillo
}
